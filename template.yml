AWSTemplateFormatVersion: "2010-09-09"
Description: ""
Parameters:
  KeyName:
    Description: input EC2 Keyname
    Type: 'AWS::EC2::KeyPair::KeyName'
Resources:
    EC2VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "10.4.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: false
            InstanceTenancy: "default"
            Tags:
              -
                Key: "Name"
                Value: "test-vpc"

    EC2Subnet:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}a"
            CidrBlock: "10.4.0.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags:
              -
                Key: "Name"
                Value: "test-subnet-1a"


    EC2Subnet2:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}c"
            CidrBlock: "10.4.16.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags:
              -
                Key: "Name"
                Value: "test-subnet-1c"


    EC2Subnet3:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}d"
            CidrBlock: "10.4.32.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags:
              -
                Key: "Name"
                Value: "test-subnet-1d"

    EC2InternetGateway:
        Type: "AWS::EC2::InternetGateway"
        Properties:
            Tags:
              -
                Key: "Name"
                Value: "test-IGW"

    GatewayAttachement:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref EC2VPC
            InternetGatewayId: !Ref EC2InternetGateway

    EC2RouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags:
              -
                Key: "Name"
                Value: "test-route"

    EC2Route:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref EC2InternetGateway
            RouteTableId: !Ref EC2RouteTable

    ElasticLoadBalancingV2LoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "test-ELB"
            Scheme: "internet-facing"
            Type: "application"
            Subnets:
              - !Ref EC2Subnet
              - !Ref EC2Subnet2
              - !Ref EC2Subnet3
            IpAddressType: "ipv4"
            LoadBalancerAttributes:
              -
                Key: "access_logs.s3.enabled"
                Value: "false"
              -
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              -
                Key: "deletion_protection.enabled"
                Value: "false"
              -
                Key: "routing.http2.enabled"
                Value: "true"
              -
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              -
                Key: "routing.http.xff_client_port.enabled"
                Value: "false"
              -
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              -
                Key: "waf.fail_open.enabled"
                Value: "false"
              -
                Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                Value: "false"

    ElasticLoadBalancingV2Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions:
              -
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                Type: "forward"


    EC2SecurityGroup2:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "test-SG2"
            GroupName: "test-SG2"
            Tags:
              -
                Key: "Name"
                Value: "test-SG2"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIpv6: "::/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "0.0.0.0/0"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              -
                CidrIpv6: "::/0"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup3:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "test-SG3"
            GroupName: "test-SG3"
            Tags:
              -
                Key: "Name"
                Value: "test-SG3"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                CidrIp: !GetAtt EC2VPC.CidrBlock
                Description: "test-vpc"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: "test-TG"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets:
              -
                Id: !Ref EC2Instance
                Port: 80

    EC2Instance:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: "ami-09ebacdc178ae23b7"
            InstanceType: "t2.small"
            KeyName: !Ref KeyName
            AvailabilityZone: !GetAtt EC2Subnet.AvailabilityZone
            SubnetId: !Ref EC2Subnet
            SecurityGroupIds:
              - !Ref EC2SecurityGroup3
            BlockDeviceMappings:
              -
                DeviceName: "/dev/xvda"
                Ebs:
                    Encrypted: false
                    VolumeSize: 8
                    VolumeType: "gp2"
            Tags:
              -
                Key: "Name"
                Value: "test-EC2"
